@page "/grpc-rf"
@using BlazorRpc
@inject GrpcFuntions _rf
@inject SrFunctions _srf

<PageTitle>Remote Functions Test</PageTitle>

<style>
    .typeface {
        font-family: Consolas;
    }

    .input-box {
        border: 1px solid lightgray;
        margin-left: 8px;
        margin-bottom: 4px;
        text-align: right;
        padding-right: 8px;
    }

        .input-box:focus {
            outline: none !important;
            border: 1px solid silver;
            box-shadow: none;
        }


    .simply-command {
        color: rebeccapurple;
        text-decoration: underline;
    }
</style>

<h3>Remote Functions RPC</h3>
<hr />
<h5>Calculate Hypotenuse</h5>
<table class="typeface">
    <tr>
        <td><label>Leg-A</label></td>
        <td><input class="input-box" @bind-value=_a /></td>
    </tr>
    <tr>
        <td><label>Leg-B</label></td>
        <td><input class="input-box" @bind-value=_b /></td>
    </tr>
    <tr>
        <td></td>
        <td style="text-align:right">
            <span role="button" class="simply-command" @onclick="Execute">Execute</span>
        </td>
    </tr>
</table>
<hr />
<br />
<h4>gRPC Unary</h4>
<pre>@_echoGrpc</pre>
<hr />
<h4>RPC SignalR Unary</h4>
<pre>@_echoSr</pre>

@code {
    string _echoGrpc = string.Empty;
    string _echoSr = string.Empty;

    string _a = "1", _b = "1";

    protected override async Task OnInitializedAsync()
    {
        await Execute();
    }

    async Task Execute()
    {
        double.TryParse(_a, out double a);
        double.TryParse(_b, out double b);
        double h;

        // parameter
        var legs = new LegsRequest { A = a, B = b };

        // grpc
        h = await _rf.HypotenuseAsync(legs);
        _echoGrpc = $"Hypotenuse f({legs.A}, {legs.B}) = {h}";

        // signalr
        h = await _srf.HypotenuseAsync(legs);
        _echoSr = $"Hypotenuse f({legs.A}, {legs.B}) = {h}";
    }
}
